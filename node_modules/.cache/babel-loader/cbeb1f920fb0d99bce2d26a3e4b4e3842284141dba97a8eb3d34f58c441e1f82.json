{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alice\\\\Downloads\\\\Jogo-da-Forca\\\\jogo-forca\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Chute from \"./components/Chute\";\nimport Jogo from \"./components/Jogo\";\nimport Letras from \"./components/Letras\";\nimport palavras from \"./palavras\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [listaLetras, setListaLetras] = useState([]);\n  const [Letra, setLetra] = useState('');\n  const [underline, setUnderline] = useState([]);\n  const [palavra, setPalavra] = useState('');\n  const [Letrinha, setLetrinha] = useState([]);\n  const [chutePalavra, setChutePalavra] = useState('');\n  const [ativarBtn, setAtivarBtn] = useState(\"\");\n  const [TrueOrFalse, setTrueOrFalse] = useState(true);\n  const [cor, setCor] = useState('');\n  const [countErro, setcountErro] = useState(0);\n  function gameStart() {\n    const palavraSoteada = palavras[Math.floor(Math.random() * palavras.length)];\n    setPalavra(palavraSoteada);\n    const arrPalavra = [...palavraSoteada];\n    setLetrinha(arrPalavra);\n    const listUnderline = arrPalavra.map(_l => \"_ \");\n    setUnderline(listUnderline);\n    setTrueOrFalse(false);\n    setAtivarBtn('ativado');\n    setcountErro(0);\n    setCor('');\n    let newarr = [];\n    setListaLetras(newarr);\n  }\n  ;\n  function letraEscolhida(letra) {\n    if (!listaLetras.includes(letra)) {\n      setListaLetras([...listaLetras, letra]);\n      setLetra(letra);\n    }\n    let isL = letra;\n    check(isL);\n  }\n  function check(isL) {\n    if (palavra.includes(isL)) {\n      const novoArray = [...palavra];\n      const novoUnderline = [...underline];\n      novoArray.forEach((l, i) => {\n        if (l === isL) {\n          novoUnderline[i] = isL;\n          setUnderline([...novoUnderline]);\n        }\n        EndGame(novoArray, novoUnderline);\n      });\n    } else {\n      if (countErro <= 5) {\n        if (!listaLetras.includes(isL)) {\n          let tmpContador = countErro + 1;\n          setcountErro(tmpContador);\n          if (tmpContador === 6) {\n            setCor('red');\n            setTrueOrFalse(true);\n            setAtivarBtn('');\n          }\n        }\n      }\n    }\n  }\n  function EndGame(novoArray, novoUnderline) {\n    if (novoArray.toString() === novoUnderline.toString()) {\n      console.log('entrei no caio');\n      setCor('green');\n      setTrueOrFalse(true);\n      setAtivarBtn('');\n    }\n  }\n  const palavraChutada = ev => {\n    const pChute = ev.target.value;\n    setChutePalavra(pChute);\n    console.log('esse eu digitei ' + pChute);\n  };\n  function checkPalavra() {\n    setChutePalavra('');\n    if (palavra.toString() === chutePalavra) {\n      setUnderline([...palavra]);\n      setCor('green');\n      setTrueOrFalse(true);\n      setAtivarBtn('');\n    } else {\n      setUnderline([...palavra]);\n      setcountErro(6);\n      setCor('red');\n      setTrueOrFalse(true);\n      setAtivarBtn('');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jogo, {\n      gameStart: gameStart,\n      countErro: countErro,\n      palavra: palavra,\n      underline: underline,\n      cor: cor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Letras, {\n      listaLetras: listaLetras,\n      ativarBtn: ativarBtn,\n      TrueOrFalse: TrueOrFalse,\n      letraEscolhida: letraEscolhida\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chute, {\n      chutePalavra: chutePalavra,\n      checkPalavra: checkPalavra,\n      palavraChutada: palavraChutada,\n      TrueOrFalse: TrueOrFalse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"sTvXDrdZc76y98iFxIy1aG9UXfg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Chute","Jogo","Letras","palavras","App","listaLetras","setListaLetras","Letra","setLetra","underline","setUnderline","palavra","setPalavra","Letrinha","setLetrinha","chutePalavra","setChutePalavra","ativarBtn","setAtivarBtn","TrueOrFalse","setTrueOrFalse","cor","setCor","countErro","setcountErro","gameStart","palavraSoteada","Math","floor","random","length","arrPalavra","listUnderline","map","_l","newarr","letraEscolhida","letra","includes","isL","check","novoArray","novoUnderline","forEach","l","i","EndGame","tmpContador","toString","console","log","palavraChutada","ev","pChute","target","value","checkPalavra"],"sources":["C:/Users/alice/Downloads/Jogo-da-Forca/jogo-forca/src/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Chute from \"./components/Chute\";\r\nimport Jogo from \"./components/Jogo\";\r\nimport Letras from \"./components/Letras\";\r\nimport palavras from \"./palavras\"\r\n\r\n\r\nexport default function App() {\r\n\r\n  const [listaLetras, setListaLetras] = useState([]);\r\n  const [Letra, setLetra] = useState('');\r\n  const [underline, setUnderline] = useState([]);\r\n  const [palavra, setPalavra] = useState('')\r\n  const [Letrinha, setLetrinha] = useState([])\r\n  const [chutePalavra, setChutePalavra] = useState('')\r\n  const [ativarBtn, setAtivarBtn] = useState(\"\");\r\n  const [TrueOrFalse, setTrueOrFalse] = useState(true);\r\n  const [cor, setCor] = useState('')\r\n  const [countErro, setcountErro] = useState(0);\r\n  \r\n\r\n  function gameStart() {\r\n        const palavraSoteada = palavras[Math.floor(Math.random() * palavras.length)];\r\n        setPalavra(palavraSoteada);\r\n        const arrPalavra = [...palavraSoteada];\r\n        setLetrinha(arrPalavra);\r\n        const listUnderline = arrPalavra.map(_l => \"_ \");\r\n        setUnderline(listUnderline);\r\n        setTrueOrFalse(false)\r\n        setAtivarBtn('ativado')\r\n        setcountErro(0)\r\n        setCor('')\r\n        let newarr = [];\r\n        setListaLetras(newarr);\r\n  };\r\n\r\n  function letraEscolhida(letra) {\r\n    if (!listaLetras.includes(letra)) {\r\n        setListaLetras([...listaLetras, letra])\r\n        setLetra(letra)\r\n    }\r\n    let isL = letra\r\n    check(isL)\r\n         \r\n  }\r\n\r\n  function check(isL){\r\n    if(palavra.includes(isL)){\r\n      const novoArray = [...palavra];\r\n      const novoUnderline = [...underline];\r\n      novoArray.forEach((l, i) => {\r\n        if(l === isL){\r\n          novoUnderline[i] = isL;\r\n          setUnderline([...novoUnderline])\r\n        }\r\n        EndGame(novoArray, novoUnderline);\r\n      })\r\n    }else{ \r\n      if(countErro <= 5){\r\n        if(!listaLetras.includes(isL)){\r\n          let tmpContador = countErro + 1;\r\n          setcountErro(tmpContador);\r\n            if(tmpContador === 6){\r\n              setCor('red')\r\n              setTrueOrFalse(true)\r\n              setAtivarBtn('')\r\n            }\r\n        }\r\n    }\r\n      \r\n    }\r\n  }\r\n  function EndGame(novoArray, novoUnderline){\r\n    if(novoArray.toString() === novoUnderline.toString()){\r\n      console.log('entrei no caio')\r\n      setCor('green')\r\n      setTrueOrFalse(true)\r\n      setAtivarBtn('')\r\n    }\r\n  }\r\n  const palavraChutada = (ev)=> {\r\n    const pChute = ev.target.value;\r\n    setChutePalavra(pChute)\r\n    console.log('esse eu digitei '+ pChute);\r\n   \r\n}\r\nfunction checkPalavra(){\r\n    setChutePalavra('')\r\n    if(palavra.toString() === chutePalavra){\r\n      setUnderline([...palavra])\r\n      setCor('green')\r\n      setTrueOrFalse(true)\r\n      setAtivarBtn('')\r\n    }else{\r\n      setUnderline([...palavra])\r\n      setcountErro(6)\r\n      setCor('red')\r\n      setTrueOrFalse(true)\r\n      setAtivarBtn('')\r\n    }\r\n}\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <Jogo\r\n        gameStart={gameStart}\r\n        countErro={countErro}\r\n        palavra={palavra}\r\n        underline={underline}\r\n        cor={cor}\r\n      />\r\n      <Letras\r\n        listaLetras={listaLetras}\r\n        ativarBtn={ativarBtn}\r\n        TrueOrFalse={TrueOrFalse}\r\n        letraEscolhida={letraEscolhida}\r\n      />\r\n      <Chute\r\n        chutePalavra={chutePalavra}\r\n        checkPalavra={checkPalavra}\r\n        palavraChutada={palavraChutada}\r\n        TrueOrFalse={TrueOrFalse}\r\n      />\r\n    </>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}